spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: dapi
  profiles:
    active: dev
  datasource:
    dynamic:
      hikari:
        connection-test-query: select 1
        idle-timeout: 600000
        pool-name: hikariPool
        max-lifetime: 1800000
        connection-timeout: 30000
        min-idle: 1
        max-pool-size: 5
        is-auto-commit: true
        connection-init-sql: select 1
        is-read-only: false
      primary: master
      strict: false
      datasource:
        master:
          url: ${mysql.url}
          username: ${mysql.username}
          password: ${mysql.password}
          p6spy: false
        second:
          url: ${mysql.second.url}
          username: ${mysql.second.username}
          password: ${mysql.second.password}
          p6spy: false
        pg:
          url: ${pg.url}
          username: ${pg.username}
          password: ${pg.password}
          p6spy: false
  flyway:
    enabled: true
    encoding: UTF-8
    locations: classpath:db/migration
    sqlMigrationPrefix: V
    sqlMigrationSeparator: __
    sqlMigrationSuffixes: .sql
    validateOnMigrate: true
    baselineOnMigrate: true
    clean-disabled: true
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
  rabbitmq:
    password: ${rabbitmq.password}
    port: ${rabbitmq.port}
    addresses: ${rabbitmq.address}
  kafka:
    bootstrap-servers: ${kafka.bootstrap-servers}
    properties:
      security.protocol: SASL_SSL
      sasl:
        mechanism: SCRAM-SHA-256
        jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="${kafka.username}" password="${kafka.password}";
    consumer:
      group-id: ${kafka.username}-consumers
      auto-offset-reset: latest
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: com.duzy
    producer:
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  mail:
    default-encoding: utf-8
    host: smtp.qq.com
    protocol: smtp
  data:
    redis:
      port: ${redis.port}
      host: ${redis.host}
      password: ${redis.password}
      lettuce:
        pool:
          max-active: 3
          max-idle: 1
          max-wait: 60s
          min-idle: 1
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    auto-mapping-unknown-column-behavior: warning
    cache-enabled: false
    default-executor-type: BATCH
    lazy-loading-enabled: false
  global-config:
    db-config:
      logic-delete-value: 1
      logic-not-delete-value: 0
# springdoc-openapi项目配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: com.duzy.api,com.duzy.controller
# knife4j的增强配置，不需要增强可以不配
knife4j:
  enable: true
  setting:
    language: zh_cn
server:
  port: 8080
  tomcat:
    max-http-form-post-size: 100
debug: true
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
#aws配置
aws.credentials.accessKey: ${aws.credentials.accessKey}
aws.credentials.secretKey: ${aws.credentials.secretKey}
aws.region: ${aws.region}
#队列名称  fifo队列必须以 .fifo结尾
aws.sqs.endpoint: ${aws.sqs.endpoint}
queue.stand: queue1661680034119
queue.fifo: mysqs.fifo
queue.test: testQueue1661681103227
#s3
aws.s3.bucket: baohgghawss3
# ip2geo
post.ip.url: "http://ip-api.com/batch?fields=status,message,continent,continentCode,country,countryCode,region,regionName,city,district,zip,lat,lon,timezone,offset,currency,isp,org,as,asname,mobile,proxy,hosting,query&lang=zh-CN"
# ssh登陆文件路径
ssh.log.path: "/secure"
# ssh日志提取ip的正则
ssh.log.reg: "((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))"
# nginx access.log文件路径
nginx.log.path: "/secure"
# nginx access.log日志提取ip的正则
nginx.log.reg: "(?<ip>\\d+\\.\\d+\\.\\d+\\.\\d+)(?<datetime> - - \\[(.*?)])(?<t1>\\s[\\\\\"]+)(?<requestMethod>[A-Z[/url]]+)(?<t2> )(?<requestUrl>\\S+\\s+)(?<protocol>\\S+\")(?<status> \\d+)(?<bytes> \\d+)(?<referer> \"(.*?)\")(?<agent> \"(.*?)\")"


# redis中key名称
#ip-api.com 批量请求的速度限制锁
ip-api-com.lock: req_rate_limit
logging:
  file:
    path: ${logPath}
  level:
    root: debug
